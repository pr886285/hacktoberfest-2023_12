You are given N pairs of numbers. In every pair, the first number is always smaller than the second number. A pair (c, d) can follow another pair (a, b) if b < c. Chain of pairs can be formed in this fashion. You have to find the longest chain which can be formed from the given set of pairs. 
 

Example 1:

Input:
N = 5
P[] = {5  24 , 39 60 , 15 28 , 27 40 , 50 90}
Output: 3
Explanation: The given pairs are { {5, 24}, {39, 60},
{15, 28}, {27, 40}, {50, 90} },the longest chain that
can be formed is of length 3, and the chain is
{{5, 24}, {27, 40}, {50, 90}}



def maxChainLength(P):
    n = len(P)
    
    # Sort the pairs based on the second element
    P.sort(key=lambda x: x[1])
    
    # Initialize an array to store the longest chain ending at each pair
    dp = [1] * n
    
    for i in range(1, n):
        for j in range(i):
            if P[i][0] > P[j][1] and dp[i] < dp[j] + 1:
                dp[i] = dp[j] + 1
    
    # The maximum value in dp array is the length of the longest chain
    return max(dp)

# Example usage
N = 5
P = [(5, 24), (39, 60), (15, 28), (27, 40), (50, 90)]
result = maxChainLength(P)
print(result)
